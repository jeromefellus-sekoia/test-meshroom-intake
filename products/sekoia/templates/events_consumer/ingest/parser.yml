name: {{NAME}}
pipeline:
  - name: event

    # Example of Grok pattern matching and extraction from log lines
    external:
      name: grok.match
      properties:
        pattern: "%{EXAMPLE_HEADER}(%{EXAMPLE_INFO}|%{EXAMPLE_ALERT})"
        custom_patterns:
          EXAMPLE_HEADER: >-
            (%{TIMESTAMP_ISO8601} %{HOSTNAME:hostname} example\[%{INT}\]: )?
          EXAMPLE_INFO: >-
            \[%{INT}:%{BASE16NUM}\] info: %{IPORHOST:source_ip} %{DATA:dns_question_name} %{WORD:dns_question_type} %{WORD:dns_question_class}
          EXAMPLE_ALERT: >-
            \[%{INT}:%{BASE16NUM}\] error: %{DATA:alert}: %{GREEDYDATA:alert_message}

  - name: set_ecs_fields

stages:
  # Copy parsed fields to ECS fields
  set_ecs_fields:
    actions:
      - set:
          dns.question.class: "{{event.message.dns_question_class}}"
          dns.question.name: "{{event.message.dns_question_name.strip('.')}}"
          dns.question.type: "{{event.message.dns_question_type}}"
          error.message: "{{event.message.alert_message}}"
          host.name: "{{event.message.hostname}}"
          source.domain: "{{event.message.source_domain}}"
          source.ip: "{{event.message.source_ip}}"
          source.port: "{{event.message.source_port}}"
          user.id: "{{event.message.user_id}}"
          user.name: "{{event.message.user_name}}"

      - set:
          dns.type: "query"
        filter: "{{final.source.ip != null}}"

      - set:
          dns.size_in_char: "{{final.dns.question.name | length}}"
        filter: "{{final.dns.question.name != null }}"